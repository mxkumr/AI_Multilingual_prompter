{
  "en": "def copy_bytes(dest, src, n):\n    dest[:n] = src[:n]",
  "zh-CN": "def memcpy(dest: bytearray, src: bytes, n: int) -> None:\n    \"\"\"\n    将源缓冲区的前n个字节复制到目标缓冲区。\n    \n    参数:\n    dest (bytearray): 目标缓冲区（必须可变，长度至少为n）\n    src (bytes): 源缓冲区（不可变，长度至少为n）\n    n (int): 要复制的字节数（必须 <= 256）\n    \n    注意: \n    - 函数假设dest和src的长度均 >= n（由题目保证缓冲区足够）\n    - n=0时无操作\n    \"\"\"\n    # 使用切片复制（高效且安全）\n    dest[:n] = src[:n]",
  "hi": "def copy_bytes(destination, source, count):\n    destination[:count] = source[:count]",
  "es": "def copy_bytes(dest, src, count):\n    dest[:count] = src[:count]",
  "ar": "def copy_bytes(destination, source, count):\n    \"\"\"\n    نسخ عدد من البايتات من المصدر إلى الوجهة.\n    \n    :param destination: الوجهة (كائن bytearray قابل للتعديل)\n    :param source: المصدر (كائن bytes أو bytearray)\n    :param count: عدد البايتات التي سيتم نسخها\n    \"\"\"\n    destination[:count] = source[:count]",
  "bn": "def copy_bytes(dest, src, n):\n    dest[:n] = src[:n]",
  "fr": "def copy_memory(dest, src, num_bytes):\n    \"\"\"\n    Copie num_bytes d'octets de la source vers la destination.\n    \n    Args:\n        dest (bytearray): Buffer de destination (256 octets au minimum).\n        src (bytearray): Buffer source.\n        num_bytes (int): Nombre d'octets à copier (doit être <= 256).\n    \"\"\"\n    dest[:num_bytes] = src[:num_bytes]",
  "ru": "def copy_memory(dest, src, n):\n    \"\"\"\n    Копирует n байтов из источника src в назначение dest.\n    \n    Параметры:\n    dest (bytearray): Буфер назначения (должен быть изменяемым, например, bytearray).\n    src (bytes или bytearray): Источник байтов.\n    n (int): Количество байтов для копирования.\n    \"\"\"\n    dest[:n] = src[:n]",
  "pt": "def memcpy(dest, source, n):\n    dest[:n] = source[:n]",
  "ur": "from [ESI] to [EDI]\n    pop edi\n    pop esi\n    pop ebp\n    ret\n```\n\n**Note:**  \n- This code assumes a 32-bit x86 environment with the `cdecl` calling convention.  \n- The first argument (destination buffer) is at `[ebp+8]`, second (source buffer) at `[ebp+12]`, and third (byte count) at `[ebp+16]`.  \n- Registers `ESI`, `EDI`, and `ECX` are preserved as required by the calling convention.  \n- The buffer size (256 bytes) ensures the copy operation is safe within bounds.  \n- `CLD` ensures the direction flag is cleared (forward copy), which is standard for `MOVSB`.  \n\nThis implementation safely copies `ECX` bytes from the source buffer (`ESI`) to the destination buffer (`EDI`).",
  "id": "def memcopy(dest, src, n):\n    \"\"\"\n    Menyalin n byte dari sumber (src) ke tujuan (dest).\n    \n    Args:\n        dest (bytearray): Lokasi tujuan (harus mutable).\n        src (bytearray or bytes): Lokasi sumber.\n        n (int): Jumlah byte yang akan disalin (maksimal 256).\n    \"\"\"\n    dest[:n] = src[:n]",
  "de": "def copy_bytes(dest, src, count):\n    dest[:count] = src[:count]",
  "ja": "def copy_bytes(destination, source, count):\n    destination[:count] = source[:count]",
  "sw": "def copy_buffer(dest_start, src_start, count):\n    # Copy 'count' bytes from source buffer (starting at src_start) \n    # to destination buffer (starting at dest_start)\n    dest_buffer[dest_start:dest_start + count] = src_buffer[src_start:src_start + count]",
  "tr": "def copy_bytes(destination, source, count):\n    \"\"\"\n    Kaynaktan hedefe belirli sayıda bayt kopyalar.\n    \n    Parametreler:\n    destination (bytearray): Hedef bellek konumu (kopyalanacak verilerin yazılacağı yer).\n    source (bytearray veya bytes): Kaynak bellek konumu (kopyalanacak verilerin bulunduğu yer).\n    count (int): Kopyalanacak bayt sayısı.\n    \"\"\"\n    destination[:count] = source[:count]",
  "vi": "def memcopy(dest, src, num_bytes):\n    \"\"\"\n    Sao chép num_bytes từ nguồn (src) vào đích (dest)\n    \n    Args:\n        dest (bytearray): Bộ đệm đích (phải là bytearray)\n        src (bytearray): Bộ đệm nguồn (phải là bytearray)\n        num_bytes (int): Số byte cần sao chép\n    \"\"\"\n    dest[:num_bytes] = src[:num_bytes]",
  "ko": "def copy_bytes(destination, source, count):\n    \"\"\"\n    목적지 버퍼에 출처 버퍼의 일부를 복사합니다.\n    \n    Args:\n        destination: 목적지 버퍼 (bytearray)\n        source: 출처 버퍼 (bytearray)\n        count: 복사할 바이트 수\n    \"\"\"\n    destination[:count] = source[:count]",
  "ta": "def copy_bytes(target, source, count):\n    target[:count] = source[:count]",
  "mr": "def memcopy(dest, src, count):\n    dest[0:count] = src[0:count]",
  "fa": "def copy_bytes(destination, source, count):\n    destination[:count] = source[:count]"
}