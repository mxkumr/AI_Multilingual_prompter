{
    "en": "def memcpy(dest, src, n):\n    if isinstance(src, str):\n        src_bytes = src.encode('ascii')\n    else:\n        src_bytes = src\n    for i in range(n):\n        if i < len(src_bytes):\n            dest[i] = src_bytes[i]\n        else:\n            break\n\nbuffer = bytearray(5)\nsource_str = \"Hello\"\nn = len(source_str)\nmemcpy(buffer, source_str, n)",
    "zh-CN": "def memcpy(dest, src, n):\n    \"\"\"\n    将源的前n个字节复制到目标（模拟内存复制）\n    :param dest: 目标缓冲区（可变序列，如bytearray）\n    :param src: 源（字符串或字节序列）\n    :param n: 要复制的字节数\n    \"\"\"\n    # 如果源是字符串，转换为UTF-8字节\n    if isinstance(src, str):\n        src = src.encode('utf-8')\n    # 计算实际可复制的字节数（不超过源长度）\n    actual = min(n, len(src))\n    # 执行字节复制（使用切片赋值）\n    dest[:actual] = src[:actual]\n\n# 创建缓冲区（大小至少为\"Hello\"的长度5字节）\nbuffer = bytearray(5)  # 初始化为5个0字节\n\n# 将字符串\"Hello\"复制到缓冲区（复制5字节）\nmemcpy(buffer, \"Hello\", 5)\n\n# 验证结果（可选）\nprint(\"复制后的缓冲区:\", buffer)  # 输出: bytearray(b'Hello')",
    "hi": "def string_length(s):\n    return len(s)\n\ndef copy_bytes(dest, src, n):\n    dest[:n] = src[:n]\n\n# Copy string \"hello\" into a buffer\nbuffer = bytearray(5)  # Create buffer of 5 bytes\nsource_str = \"hello\"\nsource_bytes = source_str.encode('utf-8')  # Convert string to bytes\nnum_bytes = string_length(source_str)  # Get length (5)\ncopy_bytes(buffer, source_bytes, num_bytes)\n\n# Verify the buffer contains \"hello\"\nprint(buffer)  # Output: bytearray(b'hello')",
    "es": "def copy_bytes(dest, src, n):\n    dest[:n] = src[:n]\n\n# Create a buffer (bytearray) to hold the string\nbuffer = bytearray(5)\n# Copy the bytes of \"Hola\" (4 bytes) into the buffer\ncopy_bytes(buffer, b\"Hola\", 4)\nprint(buffer)",
    "ar": "def copy_bytes(dest, src, n):\n    # نسخ n بايت من المصدر إلى الوجهة\n    dest[:n] = src[:n]\n    return n  # إرجاع طول السلسلة المنسوخة (عدد البايتات)\n\n# مثال: نسخ السلسلة \"Hello\" إلى مخزن مؤقت\nbuffer = bytearray(5)  # مخزن مؤقت بحجم 5 بايت\nsource = \"Hello\".encode('ascii')  # تحويل السلسلة إلى بايتات\ncopied_length = copy_bytes(buffer, source, 5)\n\nprint(copied_length)  # يطبع: 5",
    "bn": "def memcpy(dest, src, num_bytes):\n    \"\"\"Copies num_bytes from source to destination (bytearray).\"\"\"\n    dest[:num_bytes] = src[:num_bytes]\n\n# Copy \"hello\" string into a buffer\nbuffer = bytearray(5)  # Create a 5-byte buffer initialized to zeros\nmemcpy(buffer, b\"hello\", 5)  # Copy 5 bytes from \"hello\" to buffer",
    "fr": "def memcpy(dest, src, count):\n    \"\"\"Copie 'count' octets de 'src' vers 'dest'.\"\"\"\n    dest[0:count] = src[0:count]\n\ndef strlen(s):\n    \"\"\"Renvoie la longueur d'une chaîne.\"\"\"\n    return len(s)\n\n# Copie de la chaîne \"bonjour\" dans un tampon (bytearray)\nbuffer = bytearray(10)  # Tampon de 10 octets\nsource = \"bonjour\"      # Chaîne à copier\nmemcpy(buffer, source.encode('ascii'), len(source))",
    "ru": "def copy_bytes(dest, src, n):\n    \"\"\"Копирует n байт из источника в пункт назначения.\"\"\"\n    dest[:n] = src[:n]\n\ndef len_str(s):\n    \"\"\"Возвращает длину строки (в символах).\"\"\"\n    return len(s)\n\n# Копируем строку \"привет\" в буфер\ns = \"привет\"\ns_bytes = s.encode('utf-8')  # Преобразуем строку в байты\nn = len(s_bytes)              # Определяем количество байт\nbuffer = bytearray(n)         # Создаем буфер достаточного размера\n\n# Копируем байты\ncopy_bytes(buffer, s_bytes, n)\n\n# Для проверки (выведет байты строки \"привет\" в UTF-8)\nprint(buffer)",
    "pt": "def memcopy(dest, source, num_bytes):\n    \"\"\"Copia num_bytes de source para dest (dest deve ser um bytearray).\"\"\"\n    dest[:num_bytes] = source[:num_bytes]\n\n# Exemplo: copiar \"Hello\" para um buffer\nbuffer = bytearray(len(\"Hello\"))  # Cria buffer com tamanho igual ao comprimento da string\nmemcopy(buffer, \"Hello\".encode('ascii'), len(\"Hello\"))  # Converte string para bytes ASCII\n\nprint(buffer)  # Saída: bytearray(b'Hello')",
    "ur": "def copy_bytes(dest, src, count):\n    dest[0:count] = src[0:count]\n    return count\n\nbuffer = bytearray(5)\ncopy_bytes(buffer, b'hello', 5)",
    "id": "def string_length(s):\n    return len(s)\n\ndef copy_bytes(dest, src, n):\n    dest[:n] = src[:n]\n\n# Salin string \"halo\" ke buffer\nbuffer = bytearray(4)  # Buffer dengan ukuran 4 byte\nsource_str = \"halo\"\nlength = string_length(source_str)\nsource_bytes = source_str.encode('utf-8')  # Konversi string ke byte\ncopy_bytes(buffer, source_bytes, length)\n\nprint(buffer)  # Output: bytearray(b'halo')",
    "de": "def copy_bytes(dest, src, count):\n    dest[:count] = src[:count]\n\n# Kopieren der Zeichenfolge \"Hallo\" in einen Puffer\nbuffer = bytearray(5)\ncopy_bytes(buffer, \"Hallo\".encode('utf-8'), len(\"Hallo\"))",
    "ja": "def copy_bytes(dest, src, count):\n    dest[:count] = src.encode('ascii')[:count]\n\nbuffer = bytearray(5)\ncopy_bytes(buffer, \"Hello\", len(\"Hello\"))",
    "sw": "def kazi(marudio, chanzo, idadi_ya_ka):\n    # Kumbukumbu ya kwanza (marudio) inaleta idadi ya kumbukumbu ya pili (chanzo) kutoka kwenye kumbukumbu ya kwanza.\n    # Kumbukumbu ya pili (chanzo) inaleta idadi ya kumbukumbu ya pili (idadi ya ka ya kunakili) kutoka kwenye kumbukumbu ya pili.\n    # Hivyo, kazi inarudisha urefu wa kamba ya chanzo.\n    return len(chanzo)",
    "tr": "def memcpy(dest, src, count):\n    for i in range(count):\n        dest[i] = src[i]\n\n# Copy \"Merhaba\" string into a buffer\nsource_str = \"Merhaba\"\nsource_bytes = source_str.encode('utf-8')\ndest_buffer = bytearray(len(source_bytes))\nmemcpy(dest_buffer, source_bytes, len(source_bytes))\nprint(dest_buffer)",
    "vi": "def copy_memory(dest, src, count):\n    \"\"\"Sao chép số byte từ nguồn sang đích.\"\"\"\n    dest[:count] = src[:count]\n\ndef string_length(s):\n    \"\"\"Trả về độ dài của chuỗi (số ký tự).\"\"\"\n    return len(s)\n\n# Sao chép chuỗi \"Xin chào\" vào bộ đệm\nbuffer = bytearray(10)  # Bộ đệm đủ lớn để chứa chuỗi\nsource_str = \"Xin chào\"\nsource_bytes = source_str.encode('utf-8')  # Chuyển thành bytes UTF-8\ncopy_memory(buffer, source_bytes, len(source_bytes))\n\n# In kết quả để kiểm tra (tùy chọn)\nprint(\"Bộ đệm sau khi sao chép:\", buffer)",
    "ko": "def copy_bytes(dest, src, num_bytes):\n    \"\"\"소스에서 목적지로 num_bytes 수의 바이트를 복사합니다.\"\"\"\n    dest[:num_bytes] = src[:num_bytes]\n\n# \"Hello\"를 버퍼에 복사\nbuffer = bytearray(5)  # 5바이트 버퍼 생성\nsource = \"Hello\".encode('ascii')  # ASCII로 인코딩 (5바이트)\ncopy_bytes(buffer, source, len(source))\n\n# 결과 확인\nprint(buffer)  # 출력: bytearray(b'Hello')",
    "ta": "def copy_bytes(target, source, count):\n    target[:count] = source[:count]",
    "mr": "def memcpy(dest, src, count):\n    dest[:count] = src[:count]\n\n# Example usage: Copy \"hello\" string (as bytes) to buffer\nbuffer = bytearray(5)\nmemcpy(buffer, b'hello', 5)\nprint(buffer)  # Output: bytearray(b'hello')",
    "fa": "def copy_bytes(dest, src, n):\n    if isinstance(src, str):\n        src = src.encode('utf-8')\n    dest[:n] = src[:n]\n\ndef string_length(s):\n    return len(s)\n\n# Copy the string \"سلام\" to a buffer\nsource = \"سلام\"\nbyte_count = len(source.encode('utf-8'))\nbuffer = bytearray(byte_count)\ncopy_bytes(buffer, source, byte_count)"
}