{
  "en": "def memcpy(dest, src, n):\n    for i in range(n):\n        dest[i] = src[i]\n    return dest",
  "zh-CN": "def memcpy(dest, src, n):\n    \"\"\"\n    将n个字节从src复制到dest（模拟C语言memcpy）\n    \n    参数:\n    dest (bytearray): 目标缓冲区（可变字节数组）\n    src (str or bytes): 源数据（字符串或字节）\n    n (int): 要复制的字节数\n    \n    注意:\n    - 如果src是字符串，会自动用UTF-8编码\n    - 如果n超过源数据长度，只复制实际长度\n    - 目标缓冲区会自动扩展到足够长度\n    \"\"\"\n    # 将字符串转换为字节\n    if isinstance(src, str):\n        src = src.encode('utf-8')\n    \n    # 确保src是字节类型\n    if not isinstance(src, (bytes, bytearray)):\n        raise TypeError(\"Source must be string, bytes, or bytearray\")\n    \n    # 确保dest是bytearray\n    if not isinstance(dest, bytearray):\n        raise TypeError(\"Destination must be a bytearray\")\n    \n    # 计算实际可复制的字节数\n    actual_n = min(n, len(src))\n    \n    # 扩展目标缓冲区（如果需要）\n    if len(dest) < actual_n:\n        dest.extend(b'\\x00' * (actual_n - len(dest)))\n    \n    # 执行复制\n    dest[:actual_n] = src[:actual_n]\n\n# 示例：将消息复制到缓冲区\nbuffer = bytearray(20)  # 创建20字节缓冲区\nmessage = \"Hello, Python!\"  # 源消息\n\n# 复制消息到缓冲区（最多复制15字节）\nmemcpy(buffer, message, 15)\n\n# 打印结果（显示实际复制的字节）\nprint(\"Buffer contents:\", buffer[:15])  # 输出: bytearray(b'Hello, Python!')\nprint(\"Buffer length:\", len(buffer))    # 输出: 20（缓冲区大小未变）",
  "hi": "def copy_bytes(destination, source, count):\n    \"\"\"Copies 'count' bytes from 'source' to 'destination'.\"\"\"\n    destination[:count] = source[:count]\n\ndef string_length(s):\n    \"\"\"Returns the length of a string.\"\"\"\n    return len(s)",
  "es": "def copy_bytes(dest, src, count):\n    dest[:count] = src[:count]\n\ndef string_length(s):\n    return len(s)\n\n# Example usage: copy a message to a buffer\nbuffer = bytearray(100)\nmessage = \"Hello, World!\"\nmessage_bytes = message.encode('utf-8')\ncopy_bytes(buffer, message_bytes, string_length(message))",
  "ar": "def copy_bytes(destination, source, num_bytes):\n    destination[:num_bytes] = source[:num_bytes]\n    return num_bytes",
  "bn": "def memcpy(dest, src, n):\n    \"\"\"Copies n bytes from source to destination (using byte arrays).\"\"\"\n    dest[:n] = src[:n]",
  "fr": "def copy_bytes(dest, src, count):\n    \"\"\"Copie 'count' octets de 'src' vers 'dest'.\"\"\"\n    dest[:count] = src[:count]\n\ndef strlen(s):\n    \"\"\"Renvoie la longueur d'une chaîne (en caractères).\"\"\"\n    return len(s)\n\n# Exemple : copie du message \"Bonjour\" vers un tampon\nmessage = \"Bonjour\"\nbuffer = bytearray(len(message))  # Tampon de taille suffisante\ncopy_bytes(buffer, message.encode('utf-8'), len(message))  # Copie des octets\nprint(buffer)  # Affiche le tampon contenant le message",
  "ru": "def copy_bytes(dest, src, n):\n    \"\"\"\n    Копирует n байтов из источника src в буфер dest.\n    dest должен быть изменяемым объектом (например, bytearray).\n    src должен быть байтовым объектом (bytes или bytearray).\n    \"\"\"\n    for i in range(n):\n        dest[i] = src[i]\n\ndef str_length(s):\n    \"\"\"\n    Возвращает длину строки s (используя встроенную функцию len).\n    \"\"\"\n    return len(s)\n\n# Пример использования: копируем сообщение в буфер\nmessage = \"Hello, World!\"\nmessage_bytes = message.encode('utf-8')  # Преобразуем строку в байты\nbuffer = bytearray(len(message_bytes))    # Создаем буфер нужного размера\n\n# Копируем сообщение в буфер\ncopy_bytes(buffer, message_bytes, str_length(message))\n\n# Проверяем результат\nprint(\"Скопировано:\", buffer.decode('utf-8'))",
  "pt": "def memcopy(dest, src, n):\n    dest[:n] = src[:n]\n\n# Exemplo de uso: copiando uma mensagem para um buffer\nmessage = \"Hello, World!\"\nmessage_bytes = message.encode('utf-8')  # Converte a string para bytes\nbuffer = bytearray(len(message_bytes))   # Cria buffer com tamanho adequado\nmemcopy(buffer, message_bytes, len(message_bytes))\n\n# Verificação (opcional)\nprint(buffer)  # Saída: bytearray(b'Hello, World!')",
  "ur": "from source\n    mov [rdi], al     ; Store byte to destination\n    inc rsi           ; Increment source pointer\n    inc rdi           ; Increment destination pointer\n    loop .loop        ; Decrement ECX and loop if not zero\n.done:\n    mov rax, rdi      ; Return destination pointer (standard memcpy behavior)\n    ret\n```\n\n**Explanation:**\n- **Parameters:** \n  - `rdi` = Destination memory address (first argument)\n  - `rsi` = Source memory address (second argument)\n  - `rdx` = Number of bytes to copy (third argument)\n- **Loop Logic:** Uses `loop` instruction to iterate `count` times, copying one byte at a time.\n- **Return Value:** Standard `memcpy` behavior returns the destination pointer (`rdi`) in `rax`.\n- **Efficiency:** Simple loop-based implementation suitable for small to moderate byte counts (uses `ECX` for loop counter, which limits count to 2^32 bytes).",
  "id": null,
  "de": "def copy_bytes(dest, src, count):\n    \"\"\"\n    Kopiert eine Anzahl von Bytes von der Quelle zum Ziel.\n    \n    Args:\n        dest: Ziel (muss ein mutable Byte-Objekt wie bytearray sein)\n        src: Quelle (kann ein String oder bytes sein)\n        count: Anzahl der zu kopierenden Bytes\n    \"\"\"\n    # Konvertiere String in Bytes, falls nötig\n    if isinstance(src, str):\n        src = src.encode('utf-8')\n    \n    # Stelle sicher, dass count nicht größer ist als die Länge von src\n    count = min(count, len(src))\n    \n    # Kopiere die Bytes\n    dest[:count] = src[:count]",
  "ja": "def copy_bytes(dest, src, num_bytes):\n    dest[:num_bytes] = src[:num_bytes]",
  "sw": "def urefu(string, source, count):\n    return len(string) * count",
  "tr": "def copy_bytes(dest, src, num_bytes):\n    \"\"\"\n    Kaynaktan hedefe belirtilen bayt sayısını kopyalar.\n    \n    Args:\n        dest (bytearray): Hedef bellek konumu (bytearray tipinde).\n        src (bytes/bytearray): Kaynak bellek konumu (bytes veya bytearray tipinde).\n        num_bytes (int): Kopyalanacak bayt sayısı.\n    \"\"\"\n    dest[:num_bytes] = src[:num_bytes]\n\ndef string_length(s):\n    \"\"\"\n    Bir dizenin uzunluğunu döndürür.\n    \n    Args:\n        s (str): Hedef dize.\n        \n    Returns:\n        int: Dizenin karakter sayısı.\n    \"\"\"\n    return len(s)\n\n# Örnek kullanım: Mesajı arabelleğe kopyalama\nmessage = \"Merhaba, Dünya!\"\nbuffer = bytearray(len(message))  # Hedef arabellek\ncopy_bytes(buffer, message.encode('ascii'), string_length(message))\nprint(buffer)  # Çıktı: bytearray(b'Merhaba, Dünya!')",
  "vi": "def copy_bytes(dest, src, num_bytes):\n    \"\"\"\n    Sao chép num_bytes từ nguồn (src) vào đích (dest)\n    dest: Đối tượng bytearray (bộ nhớ đích)\n    src: Dữ liệu byte (bytes hoặc bytearray)\n    num_bytes: Số byte cần sao chép\n    \"\"\"\n    dest[:num_bytes] = src[:num_bytes]\n\ndef string_length(s):\n    \"\"\"\n    Trả về độ dài của chuỗi\n    s: Chuỗi cần tính độ dài\n    \"\"\"\n    return len(s)\n\n# Ví dụ sao chép thông báo vào bộ đệm\nmessage = \"Xin chào, đây là thông báo!\"\nbuffer = bytearray(len(message))  # Tạo bộ đệm với kích thước bằng độ dài chuỗi\nmessage_bytes = message.encode('utf-8')  # Chuyển chuỗi thành byte\n\n# Sao chép thông báo vào bộ đệm\ncopy_bytes(buffer, message_bytes, string_length(message))\n\n# In kết quả\nprint(\"Bộ đệm sau khi sao chép:\", buffer.decode('utf-8'))",
  "ko": "def copy_bytes(dest, src, num_bytes):\n    dest[:num_bytes] = src[:num_bytes]",
  "ta": "# Function to copy bytes from source to destination\ndef memcopy(dest, src, count):\n    # Copies 'count' bytes from 'src' to 'dest' (both must be bytearray objects)\n    dest[:count] = src[:count]\n\n# Function to get the length of a string\ndef str_length(s):\n    # Returns the length of the string\n    return len(s)\n\n# Function to copy a string to clipboard (requires pyperclip library)\nimport pyperclip\n\ndef copy_to_clipboard(message):\n    pyperclip.copy(message)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create example byte arrays\n    src = bytearray(b\"Hello\")\n    dest = bytearray(5)\n    \n    # Copy bytes\n    memcopy(dest, src, 5)\n    print(\"Copied bytes:\", dest)  # Output: bytearray(b'Hello')\n    \n    # Get string length\n    print(\"Length of 'Hello':\", str_length(\"Hello\"))  # Output: 5\n    \n    # Copy to clipboard\n    copy_to_clipboard(\"This is a test message\")\n    print(\"Message copied to clipboard!\")",
  "mr": "def memcpy(dest, src, num_bytes):\n    # Convert string source to bytes if needed\n    if isinstance(src, str):\n        src = src.encode('utf-8')\n    # Copy the specified number of bytes\n    dest[0:num_bytes] = src[0:num_bytes]",
  "fa": "def copy_bytes(dest, src, count):\n    \"\"\"\n    Copies 'count' bytes from the source buffer to the destination buffer.\n    \n    Args:\n        dest: Destination buffer (bytearray)\n        src: Source buffer (bytearray)\n        count: Number of bytes to copy\n    \"\"\"\n    dest[:count] = src[:count]\n\ndef string_length(s):\n    \"\"\"\n    Returns the length of a string.\n    \n    Args:\n        s: Input string\n    \"\"\"\n    return len(s)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Copy a message to a buffer\n    message = \"Hello, Python!\"\n    buffer = bytearray(20)  # 20-byte buffer\n    \n    # Convert string to bytes and copy to buffer\n    message_bytes = message.encode('utf-8')\n    copy_bytes(buffer, message_bytes, len(message_bytes))\n    \n    print(\"Buffer contents:\", buffer[:len(message_bytes)])"
}