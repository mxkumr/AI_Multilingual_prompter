{
  "en": "import sys\n\narr = [1, 2, 3, 4, 5]\nindex = int(sys.argv[1])\nprint(arr[index])",
  "zh-CN": "import sys\n\ndef main():\n    if len(sys.argv) < 3:\n        print(\"Usage: script.py <array> <index>\")\n        return\n    arr = list(map(int, sys.argv[1].split()))\n    index = int(sys.argv[2])\n    if index < 0 or index >= len(arr):\n        print(\"Index out of range\")\n    else:\n        print(arr[index])\n\nif __name__ == \"__main__\":\n    main()",
  "hi": "import sys\n\nelements = ['a', 'b', 'c', 'd']\nindex = int(sys.argv[1])\nprint(elements[index])",
  "es": "import sys\n\ndef main():\n    if len(sys.argv) != 2:\n        print(\"Usage: python script.py <index>\")\n        return\n    try:\n        index = int(sys.argv[1])\n        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        print(matrix[index])\n    except (ValueError, IndexError):\n        print(\"Invalid index\")\n\nif __name__ == \"__main__\":\n    main()",
  "ar": "import sys\n\nelements = {'a', 'b', 'c', 'd'}\nindex = int(sys.argv[1])\nprint(list(elements)[index])",
  "fr": "import sys\n\nelements = [10, 20, 30, 40, 50]\nindex = int(sys.argv[1])\nprint(elements[index])",
  "bn": "import sys\n\nnumbers = [10, 20, 30, 40, 50]\nindex = int(sys.argv[1])\nprint(numbers[index])",
  "pt": "import sys\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = int(sys.argv[1])\nrow = index // len(matrix[0])\ncol = index % len(matrix[0])\nprint(matrix[row][col])",
  "ru": "import sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python script.py <index>\")\n        return\n    try:\n        index = int(sys.argv[1])\n        elements = {i: f\"element_{i}\" for i in range(10)}\n        print(elements.get(index, \"Index out of range\"))\n    except ValueError:\n        print(\"Index must be an integer\")\n\nif __name__ == \"__main__\":\n    main()",
  "id": "import sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: script.py <index>\")\n        return\n    try:\n        index = int(sys.argv[1])\n        elements = ['a', 'b', 'c', 'd', 'e']\n        if 0 <= index < len(elements):\n            print(elements[index])\n        else:\n            print(\"Index out of range\")\n    except ValueError:\n        print(\"Please provide a valid integer index\")\n\nif __name__ == \"__main__\":\n    main()",
  "ur": "import sys\n\ncode_elements = ['element0', 'element1', 'element2', 'element3', 'element4']\nindex = int(sys.argv[1])\nprint(code_elements[index])",
  "de": "import sys\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Please provide an integer index.\")\n        return\n    try:\n        index = int(sys.argv[1])\n        elements = [i for i in range(10)]  # Example list of elements\n        print(elements[index])\n    except (ValueError, IndexError):\n        print(\"Invalid index or out of range.\")\n\nif __name__ == \"__main__\":\n    main()",
  "ja": "import sys\n\nindices = list(map(int, sys.argv[1:]))\nelements = list(range(len(indices)))\nfor index in indices:\n    print(elements[index])",
  "mr": "import sys\n\n# Step 1: Create an array of components\narray = [10, 20, 30, 40, 50, 60]\n\n# Step 2: Extract command line arguments (excluding the script name)\n# These will be used as indices\ncommand_line_args = sys.argv[1:]\n\n# Step 3: Convert command line arguments to integers\ntry:\n    indices = list(map(int, command_line_args))\nexcept ValueError:\n    print(\"Error: Command line arguments must be integers.\")\n    sys.exit(1)\n\n# Step 4: Print elements at the given indices (if valid)\nfor idx in indices:\n    if 0 <= idx < len(array):\n        print(array[idx])\n    else:\n        print(f\"Index {idx} is out of bounds for the array.\")",
  "vi": "import sys\n\narr = [0, 1, 2, 3, 4]\nindex = int(sys.argv[1])\nprint(arr[index])",
  "te": "import sys\n\nelements = [10, 20, 30, 40, 50]\nindex = int(sys.argv[1])\nprint(elements[index])",
  "ha": "import tkinter as tk\n\ndef increment_counter():\n    count = int(label.cget(\"text\"))\n    label.config(text=str(count + 1))\n\nroot = tk.Tk()\nroot.title(\"Lambar Counter\")\n\nlabel = tk.Label(root, text=\"0\", font=(\"Arial\", 48))\nlabel.pack(pady=20)\n\nbutton = tk.Button(root, text=\"Hanyar HaÉ—in\", command=increment_counter, font=(\"Arial\", 24))\nbutton.pack(pady=10)\n\nroot.mainloop()",
  "tr": "import sys\n\ndef main():\n    arg = sys.argv[1]\n    try:\n        num = int(arg)\n        print(f\"Item {num}\")\n    except ValueError:\n        print(\"Please provide a valid integer.\")\n\nif __name__ == \"__main__\":\n    main()"
}